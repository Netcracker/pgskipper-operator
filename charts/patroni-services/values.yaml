## Default values for helm-chart.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

# The name of database superuser.
postgresUser: postgres
# The password for the database superuser.
postgresPassword: "p@ssWOrD1"
replicatorPassword: "replicator"

podLabels: {}

privateRegistry:
  enabled: false
  secrets:
    - name:
      create: false
      # registry: ghcr.io/netcracker
      # username:
      # password:
      # email:

global:
  cloudIntegrationEnabled: true

serviceAccount:
  create: true
  name: "postgres-sa"

operatorInit:
  image: ghcr.io/netcracker/qubership-credential-manager:main

##  This section describes values for patroni-services deployment
operator:
  # Docker Image that will be used to Postgres Operator deployment
  image: ghcr.io/netcracker/pgskipper-operator:main
  podLabels: {}
  securityContext: {}
  waitTimeout: 10
  # Resource limits for patroni-services pods
  resources:
    limits:
      cpu: 50m
      memory: 50Mi
    requests:
      cpu: 50m
      memory: 50Mi
  # Field for priority of the pod
#  priorityClassName: "high-priority"

#  cloudSql:
#  project: project
#  instance: cloudsql-monitoring
#  authSecretName: cloudsql-instance-credentials

#  consulRegistration:
#  host: "consul-service-consul-server.consul:8500"
#  serviceName: "postgres-service"
#  tags: [tag1, tag2, tag3]
#  meta:
#    key: value
#  leaderTags: [leader]
#  leaderMeta:
#    pgtype: leader
#  checkInterval: "10s"
#  checkTimeout: "1s"
#  deregisterAfter: "100s"

vaultRegistration:
  dockerImage: banzaicloud/vault-env:1.5.0
  enabled: false
  #  path: /postgres
  #  url: http://localhost:8200
  #  token: vaultToken
  #  paasPlatform: "kubernetes"
  #  paasVersion: "1.14"
  dbEngine:
    enabled: false
#    name: "postgresql"

policies:
  tolerations:
#    - key: "node.kubernetes.io/unreachable"
#      operator: "Exists"
#      effect: "NoExecute"
#      tolerationSeconds: 6000

tls:
  enabled: false
  certificateSecretName: pg-cert
  generateCerts:
    clusterIssuerName: ""
    enabled: false
    duration: 365
    subjectAlternativeName:
      additionalDnsNames: []
      additionalIpAddresses: []
  certificates:
    tls_key:
    tls_crt:
    ca_crt:

##  This section describes values for patroni deployment
patroni:
  clusterName: patroni

##  This section describes values for metricCollector deployment
metricCollector:
  # Optional flag for Monitoring Agent deployment
  install: true
  # Docker Image that will be used for PostgreSQL Monitoring Agent container
  dockerImage: ghcr.io/netcracker/pgskipper-monitoring-agent:main
  podLabels: {}
  databaseConnectionLimits: 250
  securityContext: {}
  resources:
    requests:
      cpu: 150m
      memory: 170Mi
    limits:
      cpu: 300m
      memory: 256Mi
  userPassword: "p@ssWOrD1"
  # InfluxDB section
  #  influxDb:
  #    # User for InfluxDB access
  #    user: admin
  #    # password for InfluxDB access
  #    password: admin
  #    # The location of monitoring InfluxDB.
  #    host: "http://system-monitor"
  #    # The name of the InfluxDB database to store the metrics. This should start with the cloud_ prefix.
  #    database: test"
  # Configuration for prometheus alerts
  prometheusRules:
    # Threshold for backup storage size for alerting
    backupAlertThreshold: 5
    # Threshold for backup storage size for warning
    backupWarningThreshold: 20
    # Alert delay to decrease false positive cases
    alertDelay: 3m
    # Maximum possible postgres backup age
    maxLastBackupAge: 86400
    # Postgres locks limit
    locksThreshold: 500
    # Postgres query execution time limit
    queryMaxTimeThreshold: 3600
    # the value of replication lag after which alert should be triggered
    # should be specified in bytes, default is set to 32MB
    replicationLagValue: 33554432
    maxConnectionExceedPercentageThreshold: 90
    maxConnectionReachedPercentageThreshold: 80
    warnWaitEventTreshold: 5
    critWaitEventTreshold: 20
    warnpctUsedThreshold: 50

  # Interval in seconds to execute Telegraf's plugins
  collectionInterval: 60
  # Metric scrape timeout in seconds
  scrapeTimeout: 20
  # Timeout in seconds to execute Telegraf's plugins
  telegrafPluginTimeout: 60
  # Timeout in seconds for execution of oc exec calls
  ocExecTimeout: 10
  # Profile for the metrics collection. The possible values are prod and dev. The default value is prod.
  # For dev profile, additional performance metrics (queries stat, tables stat) will be collected.
  metricsProfile: prod
  prometheusMonitoring: false
  applyGrafanaDashboard: false
  # Field for priority of the pod
#  priorityClassName: "high-priority"

##  This section describes values for backupDaemon deployment
backupDaemon:
  # Optional flag for PostgreSQL Backup Daemon deployment
  install: true
  # Docker Image that will be used for PostgreSQL Backup Daemon container
  dockerImage: ghcr.io/netcracker/pgskipper-backup-daemon:main
  podLabels: {}
  # If the flag is set as true, the installation procedure will configure Postgres to use the WAL archive and use the backup daemon as storage.
  # This setting can cause major disk usage impact, because each postgres WAL file size is 16MB.
  walArchiving: false
  # Schedule for backups in cron format.
  backupSchedule: "0 0/7 * * *"

  #  pgHost: pg-patroni.postgres-service
  # The eviction policy for backup daemon: period and action. The default value is 7d/delete.
  evictionPolicy: "7d/delete"
  granularEviction: "3600"
  # jobFlag: "2"
  # connectTimeout: "5"
  allowPrefix: false
  #excludedExtensions: "pg_hint_plan,plpgsql"
  useEvictionPolicyFirst: false
  evictionBinaryPolicy: "7d/delete"
  archiveEvictionPolicy: "7d"
  securityContext: {}
  # Field for priority of the pod
  #  priorityClassName: "high-priority"
  # this parameters are needed only in case when k8s PSP https://kubernetes.io/docs/concepts/policy/pod-security-policy/ enabled.
  # Resource limits for PostgreSQL Backup Daemon Pod
  resources:
    limits:
      cpu: 450m
      memory: 768Mi
    requests:
      cpu: 100m
      memory: 256Mi
  #  externalPv:
  #    name: external-nfs-pv
  #    storageClass: "test-sc"
  #    capacity: 1Gi
  # Storage section.
  storage:
    # Describes the storage type. The possible values are `pv`, `provisioned` and `ephemeral`.
    type: provisioned
    # Size of the PVC that will be create for each of Patroni Pod as mount for data files
    size: 1Gi
    # Parameter specifies the list of labels that is used to bind suitable
    # persistent volumes with the persistent volume claims
    #    selectors:
    #      - "key1=value1"
    #      - "key2=value2"
    # storageClass: local-storage
    # The names of all volumes to be used in this deployment. The number of lines must match the number of nodes.
    # storage.volumes can be used only if storage.type is set to PV
    #    volumes:
    #      - postgresql-backup-pv-1
    # The array of node-selectors that will be used for deployment.
    # storage.nodes can be used only if storage.type is set to PV
#    nodes:
#      - db-backup-node1

# pgBackRest:
#   dockerImage: ghcr.io/netcracker/pgbackrest-sidecar:main
#   repoType: "s3"
#   repoPath: "/var/lib/pgbackrest"
#   diffSchedule: "30 0/1 * * *"
#   incrSchedule: "30 0/1 * * *"
#   rwx:
#     type: pv
#     size: 3Gi
#     volumes:
#       - pg-backrest-backups-pv-1
#   s3:
#     bucket: "pgbackrest"
#     endpoint: "https://minio-service"
#     key: "minio"
#     secret: "minio123"
#     region: "us-east-1"
#     verifySsl: false


# externalDataBase:
#   type: RDS|CLOUDSQL
#   project: project
#   instance: gke-pg11
#   port: 5432
#   region: gke-pg11
#   authSecretName: externalbd-credentials
#   accessKeyId: AKIARDJ5
#   secretAccessKey: CFp0iNyQOWN2
#   restoreConfig:
#     mirror.subnet: "test/subnet"

#  s3Storage:
#    url: http://minio
#    accessKeyId: minio
#    secretAccessKey: minio123
#    bucket: backup
#    prefix: postgres
#    untrustedCert: true
#    region: auto

##  This section describes values for PostgreSQL DBaaS Adapter deployment
dbaas:
  # Optional flag for PostgreSQL DBaaS Adapter deployment
  install: false
  multiUsers: true
  # Docker Image that will be used for PostgreSQL DBaaS Adapter container
  dockerImage: ghcr.io/netcracker/pgskipper-dbaas-adapter:main
  podLabels: {}
  securityContext: {}
  # PostgreSQL cluster entry point.
  #  pgHost: pg-patroni.postgres-service
  # Allows to override database name to be connected by default
  dbName: postgres
  # readOnlyHost: "pg-patroni-ro.postgres-service"
  # DBaaS Aggregator Section
  aggregator:
    # The address of the aggregator where the adapter registers its physical database cluster.
    registrationAddress: "http://dbaas:8080"
    # Username for database registration.
    registrationUsername: "user"
    # Password for database registration.
    registrationPassword: "p@ssWOrD"
    # physicalDatabaseIdentifier: "postgres-service"
  labels:
    clusterName: "patroni"
  adapter:
    username: "dbaas-aggregator"
    password: "dbaas-aggregator"
  vaultIntegration:
    enabled: false
    address: "http://vault-service.vault:8200"
    role: "postgres-sa"
    rotationPeriod: 86400
  #  extensions:
  #    - "postgres_fdw"
  #    - "pgcrypto"
  #  updateExtensions: false
  # Resource limits for PostgreSQL DBaaS Adapter Pod
  resources:
    limits:
      cpu: 200m
      memory: 64Mi
    requests:
      cpu: 200m
      memory: 64Mi
  # Field for priority of the pod
#  priorityClassName: "high-priority"

#  This section describes parameters of the Postgres Site Manager for DR schema.
siteManager:
  install: false
  installSiteManagerCR: true
  httpAuth:
    enabled: true
    smNamespace: "site-manager"
    # smServiceAccountName: ""
    tokenSessionTimeout: 5
    smSecureAuth: false
    customAudience: "sm-services"
  activeClusterHost: "pg-patroni.postgres-sm-auth.svc.cluster-1.local"
  activeClusterPort: 5432
  standbyClusterHealthCheck:
    retriesLimit: 3
    failureRetriesLimit: 5
    retriesWaitTimeout: 30

# This section describes Query Exporter parameters.
queryExporter:
  dockerImage: ghcr.io/netcracker/qubership-query-exporter:main
  install: false
  resources:
    requests:
      cpu: 150m
      memory: 128Mi
    limits:
      cpu: 300m
      memory: 128Mi
  queryTimeout: 30
  maxMasterConnections: 10
  maxLogicalConnections: 1
  selfMonitorDisabled: false
  customQueries:
    enabled: false
    namespacesList:
      - postgres
    labels:
      query-exporter: "custom-queries"


powaUI:
  install: false
  dockerImage: powateam/powa-web:5.0.1
  #  podLabels: {}

  ingress:
    enabled: true
    host: <ingress FQDN>

  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  securityContext:
    runAsUser: 1001

replicationController:
  install: false
  dockerImage: ghcr.io/netcracker/pgskipper-replication-controller:main
  resources:
    limits:
      cpu: 200m
      memory: 64Mi
    requests:
      cpu: 200m
      memory: 64Mi
  securityContext:
    runAsUser: 101
  apiUser: replicator
  apiPassword: paSsW0rdForReplicat!oN


connectionPooler:
  install: false
  dockerImage: bitnami/pgbouncer:1.17.0-debian-11-r62
  replicas: 1
  config:
    databases:
      '*': "host=pg-patroni-direct port=5432"
    pgbouncer:
      listen_port: '6432'
      listen_addr: '0.0.0.0'
      auth_type: 'md5'
      auth_file: '/etc/pgbouncer/userlist.txt'
      auth_user: 'pgbouncer'
      auth_query: 'SELECT p_user, p_password FROM public.lookup($1)'
      ignore_startup_parameters: 'options,extra_float_digits'
  securityContext: {}

tracing:
  enabled: false
  host: "jaeger-collector.tracing.svc:4317"

tests:
  install: true
  dockerImage: ghcr.io/netcracker/pgskipper-operator-tests:main
  podLabels: {}
  # One of "full", "basic"or one from testScenarios
  runTestScenarios: "basic"
  testScenarios:
    patroniSimple:
      - check_patroni_rest
    patroniBasic:
      - check_installation_patroni
    patroniFull:
      - check_installation_patroni
      - check_rest_api_auth
      - check_scale_down_replica
      - check_scale_down_master
      - check_delete_master
      - check_manual_switchover
    backupDaemonBasic:
      - check_installation_backup_daemon
    backupDaemonFull:
      - check_installation_backup_daemon
      - check_backup_api
      - check_backup__no_metric_in_last_backup
      - check_evict_api
      - check_granular_api
      - check_wal_archiving

runTestsOnly: false


INTERNAL_TLS_ENABLED: false
GLOBAL_SECURITY_CONTEXT: true

CLOUD_PUBLIC_HOST: "k8s.default"
#  CLOUD_PROTOCOL: "https"
#  CLOUD_API_HOST: "kubernetes.default"
#  CLOUD_API_PORT: "443"
# STORAGE_RWO_CLASS: "test"
# INFRA_POSTGRES_ADMIN_PASSWORD: "test"
# INFRA_POSTGRES_ADMIN_USER: "test22"
# API_DBAAS_ADDRESS: "https://asd.com:8921"
# DBAAS_CLUSTER_DBA_CREDENTIALS_USERNAME: "user-1"
# DBAAS_CLUSTER_DBA_CREDENTIALS_PASSWORD: "user-2"
# MONITORING_ENABLED: false
# INFRA_POSTGRES_FS_GROUP: 26
