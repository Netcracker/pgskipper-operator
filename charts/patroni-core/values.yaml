## Default values for helm-chart.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

# The name of database superuser.
postgresUser: postgres
# The password for the database superuser.
postgresPassword: "p@ssWOrD1"
replicatorPassword: "replicator"

podLabels: {}

privateRegistry:
  enabled: false
  secrets:
    - name:
      create: false
      # registry: ghcr.io/netcracker
      # username:
      # password: 
      # email: 

global:
  cloudIntegrationEnabled: true

serviceAccount:
  create: true
  name: "patroni-sa"

operatorInit:
  image: ghcr.io/netcracker/credential-manager:main
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi  

##  This section describes values for postgres-operator deployment
operator:
  # Docker Image that will be used to Postgres Operator deployment
  image: ghcr.io/netcracker/pgskipper-operator:main
  podLabels: {}
  securityContext: {}
  waitTimeout: 10
  # Resource limits for postgres-operator pods
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi
  # Field for priority of the pod
#  priorityClassName: "high-priority"

vaultRegistration:
  dockerImage: banzaicloud/vault-env:1.5.0
  enabled: false
  #  path: /postgres
  #  url: http://localhost:8200
  #  token: s.0il9o9kHeVmzgEhkBP6KqZBq
  #  paasPlatform: "kubernetes"
  #  paasVersion: "1.14"
  dbEngine:
    enabled: false
#    name: "postgresql"

policies:
  tolerations:
#    - key: "node.kubernetes.io/unreachable"
#      operator: "Exists"
#      effect: "NoExecute"
#      tolerationSeconds: 6000

tls:
  enabled: false
  certificateSecretName: pg-cert
  generateCerts:
    clusterIssuerName: ""
    enabled: false
    duration: 365
    subjectAlternativeName:
      additionalDnsNames: []
      additionalIpAddresses: []
  certificates:
    tls_key:
    tls_crt:
    ca_crt:

ldap:
  enabled: false
  server: ldap.example.com
  port: 389
  basedn: "dc=example,dc=com"
  binddn: "cn=admin,dc=example,dc=com"
  bindpasswd: "adminpassword"
  ldapsearchattribute: "sAMAccountName"

##  This section describes values for patroni deployment
patroni:
  # Optional flag for Patroni deployment component
  install: true
  clusterName: patroni
  # The number of Patroni (Postgres) nodes. One of these nodes is a master, and the others are replicas.
  replicas: 2
  # Docker Image that will be used for Patroni container
  dockerImage: ghcr.io/netcracker/pgskipper-patroni-16:main
  podLabels: {}
  # patroni.fsGroup. Specifies fsGroup that will be used in Patroni Pod Spec.
  # Useful in case of k8s installation and provisioned storage
  #  fsGroup: 26
  #  affinity: {
  #    "podAffinity": {
  #      "preferredDuringSchedulingIgnoredDuringExecution": [
  #      {
  #        "podAffinityTerm": {
  #          "labelSelector": {
  #            "matchExpressions": [
  #            {
  #              "key": "app",
  #              "operator": "In",
  #              "values": [
  #                "patroni"
  #              ]
  #            },
  #            {
  #              "key": "pgcluster",
  #              "operator": "In",
  #              "values": [
  #                "patroni"
  #              ]
  #            }
  #            ]
  #          },
  #          "topologyKey": "kubernetes.io/hostname"
  #        },
  #        "weight": 1
  #      }
  #      ]
  #    }
  #  }
  #  fsGroup: 26
  # patroni.affinity parameter. Configures a `podAffinityTerm`. Possible values are required and preferred

  #  synchronousMode: true
  #  createEndpoint: true
  #  scope: patroni
  dcs:
    type: kubernetes
  #    hosts:
  #      - etcd0.etcd-patroni:2379
  #      - etcd1.etcd-patroni:2379
  #      - etcd2.etcd-patroni:2379
  #  tags:
  #    clonefrom: false
  #    nofailover: ${DR_MODE}
  #    noloadbalance: false
  #    nosync: false

  # Resource limits for Patroni pods
  resources:
    requests:
      cpu: 125m
      memory: 250Mi
    limits:
      cpu: 250m
      memory: 500Mi
  # Optional PostgreSQL configuration settings that will be applied at the start of Patroni.
  # Should be specified in key: value format, where is key is a name of PostgreSQL parameter.
  postgreSQLParams:
    - "password_encryption: md5"
    - "max_connections: 200"
    - "shared_preload_libraries: pg_stat_statements, pg_hint_plan, pg_cron"
    - "tcp_keepalives_idle: 300"
    - "tcp_keepalives_interval: 10"
    - "tcp_keepalives_count: 5"
    - "wal_level: logical"

  # Optional Patroni configuration settings that will be applied at the start of Patroni.
  # Should be specified in key: value format, where is key is a name of Patroni parameter.
  patroniParams:
    - "failsafe_mode: true"
    - "primary_start_timeout: 30"
    - "retry_timeout: 600"

  # Storage section.
  storage:
    # Describes the storage type. The possible values are `pv` and `provisioned`.
    type: pv
    # Size of the PVC that will be create for each of Patroni Pod as mount for data files
    size: 5Gi
    # Parameter specifies the list of labels that is used to bind suitable
    # persistent volumes with the persistent volume claims
    #    selectors:
    #      - "key1=value1"
    #      - "key2=value2"
    # storageClass should  be specified only if storage.type is set to provisioned
    # storageClass: local-storage
    # The names of all volumes to be used in this deployment. The number of lines must match the number of nodes.
    # storage.volumes can be used only if storage.type is set to pv
    #    volumes:
    #      - postgresql-pv-1
    #      - postgresql-pv-2
    # The array of node-selectors that will be used for deployment.
    # The number of lines must match the number of Patroni nodes.
    # storage.nodes can be used only if storage.type is set to pv
    #    nodes:
    #      - db-node1
    #      - db-node2
    #  standbyCluster:
    #    host: "pg-patroni.postgres-ek.svc.cluster-1.local"
    #    port: 5432
    # Add shm volume: true/false
  enableShmVolume: true
  # Field for priority of the pod
  #  priorityClassName: "high-priority"
  # Apply Pod Disruption Budget for patroni pods
  applyPodDisruptionBudget: false
  # Run fix script when collation version mismatch
  forceCollationVersionUpgrade: false
  powa:
    install: false
  #    password: "powa"
  majorUpgrade:
    enabled: false
    #    initDbParams: "--encoding=UTF8 --data-checksums --lc-collate=C --lc-ctype=C"
    dockerUpgradeImage: ghcr.io/netcracker/qubership-pgskipper-upgrade:main
  securityContext: {}
    #    fsGroupChangePolicy: OnRootMismatch
    #  pgWalStorageAutoManage: false
    #  pgWalStorage:
    #    type: provisioned
    # Size of the PVC that will be created for each of Patroni Pod as mount for data files
    #    size: 10Gi
    # Parameter specifies the list of labels that is used to bind suitable
    # persistent volumes with the persistent volume claims
    #    selectors:
    #      - "key1=value1"
    #      - "key2=value2"
    # storageClass should  be specified only if storage.type is set to provisioned
  #    storageClass: local-path
  # The names of all volumes to be used in this deployment. The number of lines must match the number of nodes.
  # storage.volumes can be used only if storage.type is set to pv
  #    volumes:
  #      - postgresql-pv-1
  #      - postgresql-pv-2
  # Patroni extensions area
#  external:
#    pvc:
#      - name: "pvc-postgres-test-1"
#        mountPath: "/tmp/pg-external-1"
#      - name: "pvc-postgres-test-2"
#        mountPath: "/tmp/pg-external-2"

##  This section describes values for pgBackRest
# pgBackRest:
#   dockerImage: "ghcr.io/netcracker/pgbackrest-sidecar:main"
#   repoType: "rwx"
#   repoPath: "/var/lib/pgbackrest"
#   diffSchedule: "0 0/1 * * *"
#   incrSchedule: "0 0/1 * * *"
#   rwx:
#     type: pv
#     size: 3Gi
#     volumes:
#       - pg-backrest-backups-pv-1
#   s3:
#     bucket: "pgbackrest"
#     endpoint: "https://minio-service"
#     key: "minio"
#     secret: "minio123"
#     region: "us-east-1"
#     verifySsl: false

tests:
  install: true
  dockerImage: ghcr.io/netcracker/pgskipper-operator-tests:main
  podLabels: {}
  # One of "full", "basic"or one from testScenarios
  runTestScenarios: "basic"
  testScenarios:
    patroniSimple:
      - check_patroni_rest
    patroniBasic:
      - check_installation_patroni
    patroniFull:
      - check_installation_patroni
      - check_rest_api_auth
      - check_scale_down_replica
      - check_scale_down_master
      - check_delete_master
      - check_manual_switchover

runTestsOnly: false


INTERNAL_TLS_ENABLED: false
GLOBAL_SECURITY_CONTEXT: true

CLOUD_PUBLIC_HOST: "k8s.default"
