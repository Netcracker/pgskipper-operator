apiVersion: qubership.org/v1
kind: PatroniCore
metadata:
  name: patroni-core
  labels:
    name: patroni-core
      {{ include "kubernetes.labels" . | nindent 4 }}
spec:
  {{- if .Values.privateRegistry.enabled }}
  privateRegistry:
    enabled: true
    names:
    {{- range $i, $v := .Values.privateRegistry.secrets }}
      - {{ $v.name }} 
    {{- end }}     
  {{- end }}
  installationTimestamp: {{ now | unixEpoch | quote }}
  {{ if .Values.serviceAccount.create }}
  serviceAccountName: {{default "patroni-sa" .Values.serviceAccount.name}}
{{ end }}
  {{- if .Values.policies.tolerations }}
  policies:
    tolerations: {{ toYaml .Values.policies.tolerations | nindent 6 }}
  {{- end }}
{{ if .Values.patroni.install }}
{{ if .Values.tls }}
  tls:
    enabled: {{ default "false" .Values.tls.enabled }}
    certificateSecretName: {{ .Values.tls.certificateSecretName }}
{{ end }}
  patroni:
    clusterName: {{default "patroni" .Values.patroni.clusterName}}
    dcs:
      type: {{ default "kubernetes" .Values.patroni.dcs.type }}
      {{ if or (eq .Values.patroni.dcs.type "etcd3") (eq .Values.patroni.dcs.type "etcd") }}
      {{ if .Values.patroni.dcs.hosts }}
      hosts:
{{ toYaml .Values.patroni.dcs.hosts | indent 8 }}
      {{ end }}
    {{ end }}
#    scope: {{ default "patroni" .Values.patroni.scope }}
    {{ if .Values.patroni.tags }}
    tags:
{{ toYaml .Values.patroni.tags | indent 6 }}
    {{ end }}
    {{ if .Values.patroni.createEndpoint }}
    synchronousMode: {{ default "false" .Values.patroni.synchronousMode }}
    createEndpoint: {{ default "false" .Values.patroni.createEndpoint }}
    {{ end }}
    {{ if .Values.patroni.fsGroup }}
    fsGroup: {{ .Values.patroni.fsGroup }}
    {{ end }}
    {{ if .Values.patroni.affinity }}
    affinity: {{ .Values.patroni.affinity | toJson }}
    {{ else if .Values.affinity }}
    affinity: {{ .Values.affinity | toJson }}
    {{ end }}
    {{- if .Values.patroni.podLabels }}
    podLabels:
      {{ toYaml .Values.patroni.podLabels | nindent 6 }}
      {{- include "kubernetes.labels" . | nindent 6 }}
    {{- else if .Values.podLabels }}
    podLabels:
      {{ toYaml .Values.podLabels | nindent 6 }}
      {{- include "kubernetes.labels" . | nindent 6 }}
    {{- else }}
    podLabels:
      {{ include "kubernetes.labels" . | nindent 6 }}
    {{- end }}
    podAnnotations:
      {{- toYaml .Values.patroni.podAnnotations | nindent 6 }}
    configMapAnnotations:
      {{- toYaml .Values.patroni.configMapAnnotations | nindent 6 }}
    replicas: {{ ( include "postgres.replicasCount" . ) }}
    image: {{ template "find_image" (dict "deployName" "pg_patroni" "SERVICE_NAME" "pg_patroni" "vals" .Values "default" .Values.patroni.dockerImage) }}
    patroniParams:
      {{- range .Values.patroni.patroniParams }}
      - {{ quote . }}
      {{- end }}
    postgreSQLParams:
      {{- range .Values.patroni.postgreSQLParams }}
      - {{ quote . }}
      {{- end }}
{{ if  .Values.tls }}
  {{ if  .Values.tls.enabled }}
      - "ssl: on"
      - "ssl_key_file: /certs/tls.key"
      - "ssl_cert_file: /certs/tls.crt"
      - "ssl_ca_file: /certs/ca.crt"
      - "ssl_ciphers: ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"
      - "ssl_min_protocol_version: TLSv1.2"
  {{ else }}
      - "ssl: off"
  {{ end }}
{{ end }}
  {{- if .Values.patroni.pgHba }}
    pgHba:
{{ toYaml .Values.patroni.pgHba | indent 6}}
  {{- end }}
    resources:
  {{ if .Values.patroni.resources.unlimited }}
      limits: {}
      requests:
{{ toYaml .Values.patroni.resources.requests | indent 8}}
    unlimited: {{ .Values.patroni.resources.unlimited }}
  {{ else }}
      limits:
{{ toYaml .Values.patroni.resources.limits | indent 8}}
      requests:
{{ toYaml .Values.patroni.resources.requests | indent 8}}
  {{ end }}
    storage:
      type: {{ default "pv" .Values.patroni.storage.type }}
      size: {{ default "10Gi" .Values.patroni.storage.size }}
      {{ if ( include "postgres.storageClassName" . ) }}
      storageClass: {{ ( include "postgres.storageClassName" . ) }}
      {{ end }}
      {{ if .Values.patroni.storage.volumes }}
      volumes:
          {{- range .Values.patroni.storage.volumes }}
        - {{ . }}
          {{- end }}
      {{ end }}
      {{ if .Values.patroni.storage.nodes }}
      nodes:
          {{- range .Values.patroni.storage.nodes }}
        - {{ . }}
          {{- end }}
      {{ end }}
      {{ if .Values.patroni.storage.selectors }}
      selectors:
          {{- range .Values.patroni.storage.selectors }}
        - {{ . }}
          {{- end }}
      {{ end }}
    {{ if .Values.patroni.standbyCluster }}
    standbyCluster:
      host:  {{ .Values.patroni.standbyCluster.host }}
      port:  {{ .Values.patroni.standbyCluster.port }}
    {{ end }}
    enableShmVolume: {{ hasKey .Values.patroni "enableShmVolume" | ternary .Values.patroni.enableShmVolume true }}
    {{ if .Values.patroni.priorityClassName }}
    priorityClassName: {{ .Values.patroni.priorityClassName }}
    {{ end }}
    {{- if .Values.patroni.powa.install }}
    powa:
      install: {{ .Values.patroni.powa.install }}
    {{- end }}
    securityContext:
      {{- include "restricted.globalPodSecurityContext" . | nindent 6 }}
      {{- with .Values.patroni.securityContext }}
      {{- toYaml . | nindent 6 -}}
      {{- end }}
{{ if .Values.patroni.pgWalStorage }}
    pgWalStorageAutoManage: {{ default "false" .Values.patroni.pgWalStorageAutoManage }}
    pgWalStorage:
{{ toYaml .Values.patroni.pgWalStorage | indent 6 }}
{{ end }}
    forceCollationVersionUpgrade: {{ default "false" .Values.patroni.forceCollationVersionUpgrade }}
{{- if .Values.patroni.ignoreSlots }}
    ignoreSlots: true
    ignoreSlotsPrefix: {{ default "cdc_rs_" .Values.patroni.ignoreSlotsPrefix }}
{{- end }}
{{- if .Values.patroni.external }}
    external:
      pvc:
  {{- if .Values.patroni.external.pvc }}
  {{- range $k, $v := .Values.patroni.external.pvc }}
        - name: {{ $v.name }}
          mountPath: {{ $v.mountPath }}
  {{- end }}
  {{- end }}
{{- end }}
{{ end }}
{{ if .Values.consulRegistration }}
  consulRegistration:
{{ toYaml .Values.consulRegistration | indent 4 }}
{{ end }}
{{ if .Values.vaultRegistration }}
  vaultRegistration:
    dockerImage: {{ template "find_image" (dict "deployName" "vault_env" "SERVICE_NAME" "vault_env" "vals" .Values "default" .Values.vaultRegistration.dockerImage) }}
    enabled: {{ .Values.vaultRegistration.enabled }}
    path: {{ .Values.vaultRegistration.path | default .Release.Namespace }}
  {{- if .Values.vaultRegistration.url }}
    url: {{ .Values.vaultRegistration.url }}
  {{- end }}
    dbEngine:
      enabled: {{ .Values.vaultRegistration.dbEngine.enabled }}
      name: {{ .Values.vaultRegistration.dbEngine.name | default (printf "%s_%s_postgresql" .Values.CLOUD_PUBLIC_HOST .Release.Namespace) }}
      maxOpenConnections: {{ .Values.vaultRegistration.dbEngine.maxOpenConnections | default 5 }}
      maxIdleConnections: {{ .Values.vaultRegistration.dbEngine.maxIdleConnections | default 5 }}
      maxConnectionLifetime: {{ .Values.vaultRegistration.dbEngine.maxConnectionLifetime | default "5s" }}

{{ end }}
{{ if .Values.pgBackRest }}
  pgBackRest:
    dockerImage: {{ template "find_image" (dict "deployName" "pgbackrest_sidecar" "SERVICE_NAME" "pgbackrest_sidecar" "vals" .Values "default" .Values.pgBackRest.dockerImage) }}
    repoType: {{ .Values.pgBackRest.repoType  | default "rwx" }}
    repoPath: {{ .Values.pgBackRest.repoPath | default "/var/lib/pgbackrest" }}
    diffSchedule: {{ .Values.pgBackRest.diffSchedule | default "0 0/1 * * *" }}
    incrSchedule: {{ .Values.pgBackRest.incrSchedule | default "0 0/1 * * *" }}
    backupFromStandby: {{ .Values.pgBackRest.backupFromStandby | default false }}
  {{ if .Values.pgBackRest.rwx }}
    rwx:
{{ toYaml .Values.pgBackRest.rwx | indent 6 }}
  {{ end }}
  {{ if .Values.pgBackRest.s3 }}
    s3:
{{ toYaml .Values.pgBackRest.s3 | indent 6 }}
  {{ end }}
{{- if .Values.pgBackRest.resources }}
    resources:
{{ toYaml .Values.pgBackRest.resources | indent 6 }}
{{- end }}
{{ end }}

{{ if .Values.ldap.enabled }}
  ldap:
    enabled: {{ .Values.ldap.enabled }}
    server: {{ .Values.ldap.server }}
    port: {{ .Values.ldap.port }}
    basedn: {{ .Values.ldap.basedn | quote }}
    binddn: {{ .Values.ldap.binddn | quote }}
    bindpasswd: {{ .Values.ldap.bindpasswd | quote }}
    ldapsearchattribute: {{ .Values.ldap.ldapsearchattribute | quote }}
{{ end }}

{{ if .Values.tests.install }}
  integrationTests:
    {{ if .Values.tests.affinity }}
    affinity: {{ .Values.tests.affinity | toJson }}
    {{ else if .Values.affinity }}
    affinity: {{ .Values.affinity | toJson }}
    {{ end }}
    {{- if .Values.tests.podLabels }}
    podLabels:
      {{ toYaml .Values.tests.podLabels | nindent 6 }}
      {{- include "kubernetes.labels" . | nindent 6 }}
    {{- else if .Values.podLabels }}
    podLabels:
      {{ toYaml .Values.podLabels | nindent 6 }}
      {{- include "kubernetes.labels" . | nindent 6 }}
    {{- else }}
    podLabels:
      {{ include "kubernetes.labels" . | nindent 6 }}
    {{- end }}
    image: {{ template "find_image" (dict "deployName" "postgres_operator_tests" "SERVICE_NAME" "postgres_operator_tests" "vals" .Values "default" .Values.tests.dockerImage) }}
{{ if .Values.tests.resources }}
    resources:
{{ toYaml .Values.tests.resources | indent 6 }}
{{ else }}
    resources:
      limits:
        cpu: 300m
        memory: 512Mi
      requests:
        cpu: 150m
        memory: 256Mi
{{ end }}
{{- $runTestScenarios := .Values.tests.runTestScenarios }}
{{- if or (eq (lower $runTestScenarios) "full") (eq (lower $runTestScenarios) "basic") }}
    runTestScenarios: {{.Values.tests.runTestScenarios}}
{{- else if index .Values.tests.testScenarios (printf "%s" $runTestScenarios) }}
    testList:
        {{- range (index .Values.tests.testScenarios (printf "%s" $runTestScenarios)) }}
      - {{ . }}
        {{- end }}
{{ end }}
    pgNodeQty: {{ ( include "postgres.replicasCount" . ) }}
{{ end }}
{{ if .Values.runTestsOnly }}
runTestsTime: {{ now | unixEpoch | quote }}
{{ end }}

{{- if .Values.majorUpgrade }}
majorUpgrade:
  enabled: {{ .Values.majorUpgrade.enabled | default false }}
  {{- if .Values.majorUpgrade.initDbParams }}
  initDbParams: {{ .Values.majorUpgrade.initDbParams }}
  {{- end }}
  dockerUpgradeImage: {{ template "find_image" (dict "deployName" "pg_upgrade" "SERVICE_NAME" "pg_upgrade" "vals" .Values "default" .Values.majorUpgrade.dockerUpgradeImage) }}
  {{- else if .Values.patroni.majorUpgrade }}
majorUpgrade:
  enabled: {{ .Values.patroni.majorUpgrade.enabled | default false }}
  {{- if .Values.patroni.majorUpgrade.initDbParams }}
  initDbParams: {{ .Values.patroni.majorUpgrade.initDbParams }}
  {{- end }}
  dockerUpgradeImage: {{ template "find_image" (dict "deployName" "pg_upgrade" "SERVICE_NAME" "pg_upgrade" "vals" .Values "default" .Values.patroni.majorUpgrade.dockerUpgradeImage) }}
{{- end }}